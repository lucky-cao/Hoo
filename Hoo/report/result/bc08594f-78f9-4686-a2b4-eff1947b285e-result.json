{"name": "test_mine[case4]", "status": "broken", "statusDetails": {"message": "Exception: 内容被点赞.元素不存在", "trace": "self = <test_mine.TestMine object at 0x00000219FE10C288>\ncase = {'id': 'mine_005', '优先级': 'P1', '前置条件': '', '是否执行': 'yes', ...}\n\n    @pytest.mark.parametrize(\"case\", run_ed)\n    def test_mine(self, case):\n        # case_id = case[ExcelConfig.case_id]\n        # print(case_id)\n        # case_catalog = case[ExcelConfig.case_catalog]\n        # case_name = case[ExcelConfig.case_name]\n        # case_priority = case[ExcelConfig.case_priority]\n        # case_is_run = case[ExcelConfig.case_is_run]\n        # case_preconditions = case[ExcelConfig.case_preconditions]\n        # case_step = case[ExcelConfig.case_step]\n        case_step_node = case[ExcelConfig.case_step_node]\n        date1 = analysis(case_step_node)\n        # print(date1)\n        # case_expected_outcome = case[ExcelConfig.case_expected_outcome]\n        case_expected_node = case[ExcelConfig.case_expected_node]\n        data2 = expected_analysis(case_expected_node)\n        print(data2)\n        d = ExecuteU2(\"851QFDSG22CDZ\", \"com.tencent.hobby\")\n        for step_node, expected_node in zip(date1, data2):\n            d.run_app(step_node)\n            time.sleep(0.5)\n            # for expected_node in data2:\n            if type(expected_node) == str:\n                d.app_assert(expected_node)\n            if type(expected_node) == list:\n                for e in expected_node:\n>                   d.app_assert(e)\n\ntestcase\\test_mine.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.uiauto_util.ExecuteU2 object at 0x00000219FE105308>\nelement = '内容被点赞'\n\n    def app_assert(self, element):\n        \"\"\"页面断言\"\"\"\n        time.sleep(0.7)\n        if self.dv(text=element).exists(timeout=5):\n            # exists: 等待元素出现\n            print(f\"{element}.success\")\n        elif self.dv(resourceId=element).exists(timeout=5):\n            print(f\"{element}.success\")\n        elif element == \" \":\n            pass\n        else:\n>           raise Exception(f\"{element}.元素不存在\")\nE           Exception: 内容被点赞.元素不存在\n\nutils\\uiauto_util.py:59: Exception"}, "parameters": [{"name": "case", "value": "{'id': 'mine_005', '用例目录': '影响力', '用例名称': '我的画面点击影响力', '优先级': 'P1', '是否执行': 'yes', '前置条件': '', '步骤': '1.嚯app启动》点击底部【我的】tab，我的画面点击影响力\\n2.点击【x】按钮', '步骤节点': '我的, 2202005276啊啊, 影响力\\ncom.tencent.hobby:id/btnleft', '预期结果': '1.【影响力】画面显示，内容被点赞数+内容被评论数+内容被转发数+内容被收藏数+评论被点赞数+评论被回复数=影响力的总数，当影响力数小于等于9999，显示具体的数字，当影响力数大于等于10000，显示1.0万，精确到小数点后1位，当影响力数超过1亿，显示1.0亿\\n2.返回到我的画面', '预期节点': ' ,  ,  , 内容被点赞\\n我的'}"}], "start": 1626754337346, "stop": 1626754422062, "uuid": "ca917faa-cbbc-4a7b-9828-7be01d1a13c3", "historyId": "bb56fc3e19c0a83b93a4d264c8fe76fd", "testCaseId": "da5ae44c99fde797f954ed7865065f3e", "fullName": "testcase.test_mine.TestMine#test_mine", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_mine"}, {"name": "subSuite", "value": "TestMine"}, {"name": "host", "value": "v_linkaica-PC0"}, {"name": "thread", "value": "18540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_mine"}]}